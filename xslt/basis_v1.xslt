<?xml version="1.0" encoding="iso-8859-15" ?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:output method="html" />

	<!-- Basis  v1
	XSLT for BLOCKS in MailingLijst-templates
	(c) EM-Cultuur, 2020

	db fields uses
	db.style = how to display item block ie Item (1/3)
	db.title = title
	db.location = subtitle
	db.content = html content

	db.display_playdate_start = user friendly date generated by MailingLijst ie 1 januari 2020.
	db.playdate_start = start date of event
	db.playdate_end =  end date of event

	db.image_alt = alternative button text
	db.icon2 = alternative second button text

	db.url = original url from content details
	db.url2 = original second url from content details
	db.details_url = url with redirect logic for statistics
	db.details_url2 = second url with redirect logic for statistics

	db.image = image url from content details
	db.image_alt1 = alternative text for image alt
	db.image_title = title text for image title

	db.extra1 = alternative background color
	db.extra2 = image subtitle / photo credits
	-->

	<!-- CONFIGS -->
	<!--
	The widths have to be defined here because it needs to be defined in two attributes: STYLE and WIDTH
	Outlooks uses the WITH attribute and all other e-mail clients uses STYLE attribute.
	This widths are used for images and main tables.
	-->
	<xsl:variable name="width_13">220</xsl:variable>
	<xsl:variable name="width_12">340</xsl:variable>
	<xsl:variable name="width_23">460</xsl:variable>
	<xsl:variable name="width_full">700</xsl:variable>
	<xsl:variable name="image_width_lr">220</xsl:variable>
	<xsl:variable name="image_width_agenda">125</xsl:variable>

	<!-- TEXTS -->
	<xsl:variable name="button1_text">Lees meer</xsl:variable>
	<xsl:variable name="button2_text">Koop kaarten</xsl:variable>
	<xsl:variable name="agenda_header_text">Agenda</xsl:variable>

	<xsl:variable name="date_day_0">zo </xsl:variable>
	<xsl:variable name="date_day_1">ma </xsl:variable>
	<xsl:variable name="date_day_2">di </xsl:variable>
	<xsl:variable name="date_day_3">wo </xsl:variable>
	<xsl:variable name="date_day_4">do </xsl:variable>
	<xsl:variable name="date_day_5">vr </xsl:variable>
	<xsl:variable name="date_day_6">za </xsl:variable>

	<xsl:variable name="date_month_1">jan </xsl:variable>
	<xsl:variable name="date_month_2">feb </xsl:variable>
	<xsl:variable name="date_month_3">mrt </xsl:variable>
	<xsl:variable name="date_month_4">apr </xsl:variable>
	<xsl:variable name="date_month_5">mei </xsl:variable>
	<xsl:variable name="date_month_6">jun </xsl:variable>
	<xsl:variable name="date_month_7">jul </xsl:variable>
	<xsl:variable name="date_month_8">aug </xsl:variable>
	<xsl:variable name="date_month_9">sep </xsl:variable>
	<xsl:variable name="date_month_10">okt </xsl:variable>
	<xsl:variable name="date_month_11">nov </xsl:variable>
	<xsl:variable name="date_month_12">dec </xsl:variable>

	<xsl:variable name="date_period_prefix"> t/m </xsl:variable>
	<xsl:variable name="date_time_prefix"> om </xsl:variable>
	<xsl:variable name="date_time_period_prefix"> - </xsl:variable>

	<xsl:template match="/">

		<table cellpadding="0" cellspacing="0" width="100%" style="width: 100%" class="contentMainTable">

			<!-- Loop through items with style names starting with 'Item' -->
			<xsl:for-each select="matches/match[contains(style, 'Item')]">

				<!-- Check configured block style, some blocks needs own HTML code -->
				<xsl:choose>

					<!-- All blocks except call2action, subheader/tussenkopje and agenda block styles -->
					<xsl:when test="not(contains(style, 'call2action')) and not(contains(style, 'tussenkopje')) and not(contains(style, 'agenda'))">

						<!-- Basic widths of blocks, the widths below are based on basic and ideal width of 700px -->
						<xsl:variable name="width">
							<xsl:choose>
								<xsl:when test="contains(style, '1/2')"><xsl:value-of select="$width_12" /></xsl:when>
								<xsl:when test="contains(style, '1/3')"><xsl:value-of select="$width_13" /></xsl:when>
								<xsl:when test="contains(style, '2/3')"><xsl:value-of select="$width_23" /></xsl:when>
								<xsl:otherwise><xsl:value-of select="$width_full" /></xsl:otherwise>
							</xsl:choose>
						</xsl:variable>

						<!-- Start rule for each block, determine it on the position or rule_end of previous item -->
						<xsl:if test="position() = 1 or preceding-sibling::*[1]/rule_end = 'true'">
							<xsl:text disable-output-escaping="yes"><![CDATA[<tr>]]></xsl:text>
						</xsl:if>

						<xsl:if test="(contains(style, '1/2') or contains(style, '1/3') or contains(style, '2/3')) and (position() = 1 or preceding-sibling::*[1]/rule_end = 'true')">
							<xsl:text disable-output-escaping="yes"><![CDATA[<td><table cellpadding="0" cellspacing="0"><tr><td class="contentBlockContainer"><table cellpadding="0" cellspacing="0"><tr>]]></xsl:text>
						</xsl:if>

						<!-- Basic block -->
						<td>
							<!--
                            When using featured (uitgelicht) styles, we need to change the classes to Featured which haves alternative background color by default.
                            When db.extra2 is filled, then the alternative background color is set, set the classes to Featured as well.
                            -->
							<xsl:attribute name="class">
								<xsl:choose>
									<xsl:when test="(contains(style, '1/2') or contains(style, '1/3') or contains(style, '2/3')) and not(contains(style, 'uitgelicht')) and extra1 = ''">contentMainBlock</xsl:when>
									<xsl:when test="(contains(style, '1/2') or contains(style, '1/3') or contains(style, '2/3')) and (contains(style, 'uitgelicht') or extra1 != '')">contentMainBlockFeatured</xsl:when>
									<xsl:when test="contains(style, 'banner')">contentMainBlockBanner</xsl:when>
									<xsl:when test="contains(style, 'uitgelicht') or extra1 != ''">contentMainBlockItemFeatured</xsl:when>
									<xsl:otherwise>contentMainBlockItem</xsl:otherwise>
								</xsl:choose>
							</xsl:attribute>

							<!--
                            When extra1 is filled, then a custom background color is set. Set this when is filled only.
                            You can find the default background color in CSS by classes contentMainBlock and contentMainBlockItem.
                            -->
							<xsl:if test="extra1 != ''">
								<xsl:attribute name="style">background-color: <xsl:value-of select="extra1" />;</xsl:attribute>
							</xsl:if>

							<table cellpadding="0" cellspacing="0" class="contentMainTable">
								<xsl:attribute name="width"><xsl:value-of select="$width" /></xsl:attribute>
								<xsl:attribute name="style">width: <xsl:value-of select="$width" />px;</xsl:attribute>
								<tr>
									<td>
										<!-- The data attributes are used for in contentblocks editor -->
										<table width="100%" cellpadding="0" cellspacing="0" style="width: 100%" class="emItem emEditable emMoveable">
											<xsl:attribute name="data-sort"><xsl:value-of select="sort_on" /></xsl:attribute>
											<xsl:attribute name="data-ID"><xsl:value-of select="merge_ID"/></xsl:attribute>
											<xsl:attribute name="data-last">
												<xsl:choose>
													<xsl:when test="position() = last()">true</xsl:when>
													<xsl:otherwise>false</xsl:otherwise>
												</xsl:choose>
											</xsl:attribute>
											<xsl:attribute name="data-first">
												<xsl:choose>
													<xsl:when test="position() = 1">true</xsl:when>
													<xsl:otherwise>false</xsl:otherwise>
												</xsl:choose>
											</xsl:attribute>
											<tr>
												<td>
													<xsl:attribute name="class">
														<xsl:choose>
															<xsl:when test="contains(style, 'banner')">contentInnerContainerBanner</xsl:when>
															<xsl:when test="contains(style, 'uitgelicht') or extra1 != ''">contentInnerContainerFeatured</xsl:when>
															<xsl:otherwise>contentInnerContainer</xsl:otherwise>
														</xsl:choose>
													</xsl:attribute>

													<!--
                                                    When extra1 is filled, then a custom background color is set. Set this when is filled only.
                                                    You can find the default background color in CSS by classes contentMainBlock and contentMainBlockItem.
                                                    This one is double with the TD above, but it is necassary for the editor
                                                    -->
													<xsl:if test="extra1 != ''">
														<xsl:attribute name="style">background-color: <xsl:value-of select="extra1" />;</xsl:attribute>
													</xsl:if>

													<table width="100%" cellpadding="0" cellspacing="0" style="width: 100%">
														<!-- Image above
                                                        When a placeholder is used, then this block item is created automatically after a new mailing were created
                                                        The default placeholder is a square. To prevent ugly look with 700px by 700px, replace it by a wide variant of the placeholder
                                                        Hide this part when using image left/right styles -->
														<xsl:if test="image != '' and not(contains(style, 'afb.'))">
															<tr>
																<td class="contentImage">
																	<xsl:choose>
																		<xsl:when test="url != ''">
																			<a target="_blank">
																				<xsl:attribute name="href"><xsl:value-of select="details_url" /></xsl:attribute>
																				<img border="0">
																					<xsl:attribute name="width"><xsl:value-of select="$width" /></xsl:attribute>
																					<xsl:attribute name="style">display: block; width: <xsl:value-of select="$width" />px;</xsl:attribute>
																					<xsl:attribute name="alt"><xsl:value-of select="image_alt1" /></xsl:attribute>
																					<xsl:attribute name="title"><xsl:value-of select="image_title" /></xsl:attribute>
																					<xsl:attribute name="src">
																						<xsl:choose>
																							<xsl:when test="contains(image, 'placeholder.png')">https://www.mailinglijst.nl/klanten/default/placeholder_wide.png</xsl:when>
																							<xsl:otherwise><xsl:value-of select="image" /></xsl:otherwise>
																						</xsl:choose>
																					</xsl:attribute>
																				</img>
																			</a>
																		</xsl:when>
																		<xsl:otherwise>
																			<img>
																				<xsl:attribute name="width"><xsl:value-of select="$width" /></xsl:attribute>
																				<xsl:attribute name="style">display: block; width: <xsl:value-of select="$width" />px;</xsl:attribute>
																				<xsl:attribute name="alt"><xsl:value-of select="image_alt1" /></xsl:attribute>
																				<xsl:attribute name="title"><xsl:value-of select="image_title" /></xsl:attribute>
																				<xsl:attribute name="src">
																					<xsl:choose>
																						<xsl:when test="contains(image, 'placeholder.png')">http://www.mailinglijst.nl/images/2014/placeholder_wide.png</xsl:when>
																						<xsl:otherwise><xsl:value-of select="image" /></xsl:otherwise>
																					</xsl:choose>
																				</xsl:attribute>
																			</img>
																		</xsl:otherwise>
																	</xsl:choose>

																	<!-- when db.extra2 field is filled, show it as image subtitle / photo credits -->
																	<xsl:if test="extra2 != ''">
																		<table width="100%" cellpadding="0" cellspacing="0" style="width: 100%">
																			<tr>
																				<td class="contentImageSubtitle">
																					<xsl:value-of select="extra2" />
																				</td>
																			</tr>
																		</table>
																	</xsl:if>
																</td>
															</tr>
														</xsl:if>

														<!-- Show no image when image only block style is used and without any image is set -->
														<xsl:if test="image = '' and contains(style, '(afbeelding)')">
															<tr>
																<td>
																	GEEN AFBEELDING
																</td>
															</tr>
														</xsl:if>

														<!-- Hide entire content container when using image only block style -->
														<xsl:if test="not(contains(style, '(afbeelding)'))">
															<tr>
																<td>
																	<!-- Inner container for both image left/right and content blocks
                                                                    dir attribute is used to force image right to be displayed right
                                                                    this is used to prevent code copies and image will be displayed above content when opening on mobile devices-->
																	<table cellpadding="0" cellspacing="0" width="100%" style="width: 100%">
																		<xsl:attribute name="dir">
																			<xsl:choose>
																				<xsl:when test="contains(style, 'afb. rechts')">rtl</xsl:when>
																				<xsl:otherwise>ltr</xsl:otherwise>
																			</xsl:choose>
																		</xsl:attribute>
																		<tr>
																			<!-- Image left/right container
                                                                            Will be displayed when using Item (afb. links) or Item (afb. rechts) styles
                                                                            -->
																			<xsl:if test="contains(style, 'afb.')">
																				<td>
																					<xsl:attribute name="class">
																						<xsl:choose>
																							<xsl:when test="contains(style, 'afb. rechts') and contains(style, 'banner')">contentImageRightOuterBlockBanner</xsl:when>
																							<xsl:when test="contains(style, 'afb. rechts')">contentImageRightOuterBlock</xsl:when>
																							<xsl:when test="contains(style, 'afb. links') and contains(style, 'banner')">contentImageLeftOuterBlockBanner</xsl:when>
																							<xsl:otherwise>contentImageLeftOuterBlock</xsl:otherwise>
																						</xsl:choose>
																					</xsl:attribute>

																					<table cellpadding="0" cellspacing="0" style="width: 100%" width="100%">
																						<tr>
																							<td>
																								<xsl:attribute name="class">
																									<xsl:choose>
																										<xsl:when test="contains(style, 'afb. rechts') and contains(style, 'banner')">contentImageRightInnerBlockBanner</xsl:when>
																										<xsl:when test="contains(style, 'afb. rechts')">contentImageRightInnerBlock</xsl:when>
																										<xsl:when test="contains(style, 'afb. links') and contains(style, 'banner')">contentImageLeftInnerBlockBanner</xsl:when>
																										<xsl:otherwise>contentImageLeftInnerBlock</xsl:otherwise>
																									</xsl:choose>
																								</xsl:attribute>

																								<xsl:choose>
																									<xsl:when test="url != ''">
																										<a target="_blank">
																											<xsl:attribute name="href"><xsl:value-of select="details_url" /></xsl:attribute>
																											<img border="0">
																												<xsl:attribute name="width"><xsl:value-of select="$image_width_lr" /></xsl:attribute>
																												<xsl:attribute name="style">display: block; width: <xsl:value-of select="$image_width_lr" />px;</xsl:attribute>
																												<xsl:attribute name="alt"><xsl:value-of select="image_alt1" /></xsl:attribute>
																												<xsl:attribute name="title"><xsl:value-of select="image_title" /></xsl:attribute>
																												<xsl:attribute name="src"><xsl:value-of select="image" /></xsl:attribute>
																											</img>
																										</a>
																									</xsl:when>
																									<xsl:otherwise>
																										<img>
																											<xsl:attribute name="width"><xsl:value-of select="$image_width_lr" /></xsl:attribute>
																											<xsl:attribute name="style">display: block; width: <xsl:value-of select="$image_width_lr" />px;</xsl:attribute>
																											<xsl:attribute name="alt"><xsl:value-of select="image_alt1" /></xsl:attribute>
																											<xsl:attribute name="title"><xsl:value-of select="image_title" /></xsl:attribute>
																											<xsl:attribute name="src"><xsl:value-of select="image" /></xsl:attribute>
																										</img>
																									</xsl:otherwise>
																								</xsl:choose>

																								<!-- when db.extra2 field is filled, show it as image subtitle / photo credits -->
																								<xsl:if test="extra2 != ''">
																									<table width="100%" cellpadding="0" cellspacing="0" style="width: 100%">
																										<tr>
																											<td class="contentImageSubtitle">
																												<xsl:value-of select="extra2" />
																											</td>
																										</tr>
																									</table>
																								</xsl:if>
																							</td>
																						</tr>
																					</table>
																				</td>
																			</xsl:if>
																			<!-- Content and buttons container -->
																			<td class="contentOuterBlock" dir="ltr">

																				<table cellpadding="0" cellspacing="0" width="100%" style="width: 100%;">
																					<tr>
																						<!-- BLOCK CONTENT (title, subtitle, date) with text and buttons -->
																						<td class="contentInnerBlock" style="vertical-align: top;">

																							<table cellpadding="0" cellspacing="0" width="100%" style="width: 100%">

																								<!-- Hide title when item.style.name contains "zonder titel", or content of db.title contains 'NOTITLE' (case sensitive)
																								The titles in banner styles cannot be hidden -->
																								<xsl:if test="(not(contains(style, 'zonder titel')) and not(contains(title, 'NOTITLE'))) or contains(style, 'banner')">

																									<!--
                                                                                                    Title
                                                                                                    You can add 2x double pipes to break title in max 3 lines (||)
                                                                                                    -->
																									<tr>
																										<td class="contentCaption">

																											<xsl:variable name="title">
																												<xsl:choose>
																													<xsl:when test="contains(title, ' || ')">
																														<xsl:value-of select="normalize-space(substring-before(title, ' || '))" disable-output-escaping="yes" />
																														<xsl:text disable-output-escaping="yes"><![CDATA[<br />]]></xsl:text>
																														<xsl:choose>
																															<xsl:when test="contains(substring-after(title, ' || '), ' || ')">
																																<xsl:value-of select="normalize-space(substring-before(substring-after(title, ' || '), ' ||'))" disable-output-escaping="yes" />
																																<xsl:text disable-output-escaping="yes"><![CDATA[<br />]]></xsl:text>
																																<xsl:value-of select="normalize-space(substring-after(substring-after(title, ' || '), ' || '))" disable-output-escaping="yes" />
																															</xsl:when>
																															<xsl:otherwise>
																																<xsl:value-of select="normalize-space(substring-after(title, ' || '))" disable-output-escaping="yes" />
																															</xsl:otherwise>
																														</xsl:choose>
																													</xsl:when>
																													<xsl:otherwise>
																														<xsl:value-of select="title" disable-output-escaping="yes" />
																													</xsl:otherwise>
																												</xsl:choose>
																											</xsl:variable>

																											<xsl:choose>
																												<xsl:when test="contains(style, '1/3')">
																													<h3><xsl:value-of select="$title" disable-output-escaping="yes" /></h3>
																												</xsl:when>
																												<xsl:otherwise>
																													<h2><xsl:value-of select="$title" disable-output-escaping="yes" /></h2>
																												</xsl:otherwise>
																											</xsl:choose>
																										</td>
																									</tr>

																									<!--
                                                                                                    Subtitle (DB field = location)
                                                                                                    You can add 2x double pipes to break subtitle in max 3 lines (||)
                                                                                                    -->
																									<xsl:if test="location != ''">
																										<tr>
																											<td class="contentSubtitle">

																												<xsl:variable name="subtitle">
																													<xsl:choose>
																														<xsl:when test="contains(location, ' || ')">
																															<xsl:value-of select="normalize-space(substring-before(location, ' || '))" disable-output-escaping="yes" />
																															<xsl:text disable-output-escaping="yes"><![CDATA[<br />]]></xsl:text>
																															<xsl:choose>
																																<xsl:when test="contains(substring-after(location, ' || '), ' || ')">
																																	<xsl:value-of select="normalize-space(substring-before(substring-after(location, ' || '), ' ||'))" disable-output-escaping="yes" />
																																	<xsl:text disable-output-escaping="yes"><![CDATA[<br />]]></xsl:text>
																																	<xsl:value-of select="normalize-space(substring-after(substring-after(location, ' || '), ' || '))" disable-output-escaping="yes" />
																																</xsl:when>
																																<xsl:otherwise>
																																	<xsl:value-of select="normalize-space(substring-after(location, ' || '))" disable-output-escaping="yes" />
																																</xsl:otherwise>
																															</xsl:choose>
																														</xsl:when>
																														<xsl:otherwise>
																															<xsl:value-of select="location" disable-output-escaping="yes" />
																														</xsl:otherwise>
																													</xsl:choose>
																												</xsl:variable>

																												<h4><xsl:value-of select="$subtitle" disable-output-escaping="yes" /></h4>
																											</td>
																										</tr>
																									</xsl:if>

																									<!-- Date
                                                                                                    When you empty the date fields in the content block details, then the dates will be saved as 1 january 2020.
                                                                                                    Or you filled in the db.icon field, then show the custom text from db.icon field instead of date fields.
                                                                                                    Hide this part when using banner blocks
                                                                                                    -->
																									<xsl:if test="(not(contains(display_playdate_start, '1 januari 2000')) or icon != '') and not(contains(style, 'banner'))">
																										<tr>
																											<td class="contentDate">
																												<xsl:call-template name="date_subtitle">
																													<xsl:with-param name="row" select="." />
																												</xsl:call-template>
																											</td>
																										</tr>
																									</xsl:if>

																								</xsl:if>

																								<!-- Content
																								Hide this part when using banner blocks -->
																								<xsl:if test="not(contains(style, 'banner'))">
																									<tr>
																										<td class="content">
																											<xsl:value-of select="content" disable-output-escaping="yes" />
																										</td>
																									</tr>
																								</xsl:if>

																								<!-- Two buttons for mobile version
                                                                                                image_alt DB field is used as alternative button text ('1e veld' name in ML)
                                                                                                icon2 DB field is used as alternative button text for second button
                                                                                                When 1/3 style is used, seperate two buttons into two lines-->
																								<xsl:if test="((url != '' and not(contains(image_alt, 'NOBUTTON'))) or (url2 != '' and not(contains(icon2, 'NOBUTTON'))))">
																									<tr style="display:none;width:0px;max-height:0px;overflow:hidden;mso-hide:all;height:0;font-size:0;max-height:0;line-height:0;margin:0 auto;">
																										<xsl:attribute name="class">
																											<xsl:choose>
																												<xsl:when test="contains(style, 'banner')">contentMobileButtonContainerBanner</xsl:when>
																												<xsl:when test="contains(style, 'uitgelicht') or extra1 !=''">contentMobileButtonContainerFeatured</xsl:when>
																												<xsl:otherwise>contentMobileButtonContainer</xsl:otherwise>
																											</xsl:choose>
																										</xsl:attribute>
																										<td class="contentMobileButtonBlock">

																											<table cellpadding="0" cellspacing="0" class="contentMobileInnerContainer" style="display:none;width:0px;max-height:0px;overflow:hidden;mso-hide:all;height:0;font-size:0;max-height:0;line-height:0;margin:0 auto;">
																												<!-- Button 1 -->
																												<xsl:if test="url != '' and not(contains(image_alt, 'NOBUTTON'))">
																													<td class="contentButtonBlock">
																														<xsl:attribute name="style">padding-right: 15px;</xsl:attribute>

																														<xsl:call-template name="button">
																															<xsl:with-param name="url" select="details_url" />
																															<xsl:with-param name="button_text" select="image_alt" />
																															<xsl:with-param name="button_default_text" select="$button1_text" />
																															<xsl:with-param name="class">contentButton</xsl:with-param>
																															<xsl:with-param name="hide">1</xsl:with-param>
																														</xsl:call-template>

																													</td>
																												</xsl:if>

																												<!-- Button 2 -->
																												<xsl:if test="url2 != ''">
																													<td class="contentButtonBlock">

																														<xsl:call-template name="button">
																															<xsl:with-param name="url" select="details_url2" />
																															<xsl:with-param name="button_text" select="icon2" />
																															<xsl:with-param name="button_default_text" select="$button2_text" />
																															<xsl:with-param name="class">contentButton2</xsl:with-param>
																															<xsl:with-param name="hide">1</xsl:with-param>
																														</xsl:call-template>

																													</td>
																												</xsl:if>
																											</table>

																										</td>
																									</tr>

																								</xsl:if>

																								<!-- Two buttons for some block styles as image left/right
                                                                                                For this block styles, we need to put buttons next to images instead of below it -->
																								<xsl:if test="((url != '' and not(contains(image_alt, 'NOBUTTON'))) or (url2 != '' and not(contains(icon2, 'NOBUTTON')))) and contains(style, 'afb.')">
																									<tr>
																										<xsl:call-template name="button_container">
																											<xsl:with-param name="row" select="." />
																											<xsl:with-param name="ignore_width">1</xsl:with-param>
																										</xsl:call-template>
																									</tr>
																								</xsl:if>
																							</table>
																						</td>
																					</tr>
																				</table>
																			</td>
																		</tr>
																	</table>
																</td>
															</tr>
														</xsl:if>
													</table>
												</td>
											</tr>
										</table>
									</td>
								</tr>
							</table>
						</td>

						<!-- End of block -->
						<xsl:choose>
							<xsl:when test="contains(style, '1/2') or contains(style, '1/3') or contains(style, '2/3')">
								<xsl:if test="rule_end != 'true'"><xsl:text disable-output-escaping="yes"><![CDATA[<td class="contentBlockMargin">&nbsp;</td>]]></xsl:text></xsl:if>

								<xsl:if test="position() = last() or rule_end = 'true'">
									<xsl:text disable-output-escaping="yes"><![CDATA[</tr></table></td></tr></table></td>]]></xsl:text>
								</xsl:if>
							</xsl:when>
						</xsl:choose>

						<xsl:if test="rule_end = 'true' or position() = last()">
							<xsl:text disable-output-escaping="yes"><![CDATA[</tr>]]></xsl:text>

							<!-- Buttons, used for desktop version (the mobile version is defined after content above).
                            Except for some block styles-->
							<xsl:if test="not(contains(style, 'afb.')) and not(contains(style, 'afbeelding'))">
								<tr>
									<td>
										<table cellpadding="0" cellspacing="0">
											<tr>
												<!-- BUTTON 1 -->
												<xsl:if test="preceding-sibling::match[2]/rule_end != 'true' and preceding-sibling::match[1]/rule_end != 'true'">
													<xsl:call-template name="button_container">
														<xsl:with-param name="row" select="preceding-sibling::match[2]" />
													</xsl:call-template>

													<td class="contentBlockMargin"><xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text></td>
												</xsl:if>

												<!-- BUTTON 2 -->
												<xsl:if test="preceding-sibling::match[1]/rule_end != 'true'">
													<xsl:call-template name="button_container">
														<xsl:with-param name="row" select="preceding-sibling::match[1]" />
													</xsl:call-template>

													<td class="contentBlockMargin"><xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text></td>
												</xsl:if>

												<!-- BUTTON 3 -->
												<xsl:call-template name="button_container">
													<xsl:with-param name="row" select="." />
												</xsl:call-template>
											</tr>
										</table>
									</td>
								</tr>
							</xsl:if>

							<!-- Create a line to generate margin between two item blocks -->
							<tr>
								<td class="contentBottomMargin">
									<xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text>
								</td>
							</tr>
						</xsl:if>

					</xsl:when>

					<!-- Call2action -->
					<xsl:when test="contains(style, 'call2action')">

						<tr>
							<!-- Basic block -->
							<td class="contentCallactionMainBlock">

								<!-- The data attributes are used for in contentblocks editor -->
								<table width="100%" cellpadding="0" cellspacing="0" style="width: 100%" class="emItem emEditable emMoveable">
									<xsl:attribute name="data-sort"><xsl:value-of select="sort_on" /></xsl:attribute>
									<xsl:attribute name="data-ID"><xsl:value-of select="merge_ID"/></xsl:attribute>
									<xsl:attribute name="data-last">
										<xsl:choose>
											<xsl:when test="position() = last()">true</xsl:when>
											<xsl:otherwise>false</xsl:otherwise>
										</xsl:choose>
									</xsl:attribute>
									<xsl:attribute name="data-first">
										<xsl:choose>
											<xsl:when test="position() = 1">true</xsl:when>
											<xsl:otherwise>false</xsl:otherwise>
										</xsl:choose>
									</xsl:attribute>
									<tr>
										<td class="contentCallactionOuterContainer">

											<xsl:choose>
												<xsl:when test="url != ''">

													<a target="_blank">
														<xsl:attribute name="href"><xsl:value-of select="details_url" /></xsl:attribute>
														<table width="100%" cellpadding="0" cellspacing="0" style="width: 100%">
															<tr>
																<td class="contentCallactionInnerContainer">
																	<!--
																	When extra1 is filled, then a custom background color is set. Set this when is filled only.
																	You can find the default background color in CSS by class contentCallactionInnerContainer.
																	-->
																	<xsl:if test="extra1 != ''">
																		<xsl:attribute name="style">background-color: <xsl:value-of select="extra1" />;</xsl:attribute>
																	</xsl:if>

																	<a target="_blank">
																		<xsl:attribute name="href"><xsl:value-of select="details_url" /></xsl:attribute>
																		<h2><xsl:value-of select="title" /></h2>
																	</a>
																</td>
															</tr>
														</table>
													</a>

												</xsl:when>
												<xsl:otherwise>

													<table width="100%" cellpadding="0" cellspacing="0" style="width: 100%">
														<tr>
															<td class="contentCallactionInnerContainer">
																<!--
																When extra1 is filled, then a custom background color is set. Set this when is filled only.
																You can find the default background color in CSS by class contentCallactionInnerContainer.
																-->
																<xsl:if test="extra1 != ''">
																	<xsl:attribute name="style">background-color: <xsl:value-of select="extra1" />;</xsl:attribute>
																</xsl:if>

																<h2><xsl:value-of select="title" /></h2>
															</td>
														</tr>
													</table>

												</xsl:otherwise>
											</xsl:choose>

										</td>
									</tr>
								</table>
							</td>
						</tr>

						<!-- Create a line to generate margin between two item blocks -->
						<tr>
							<td class="contentBottomMargin">
								<xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text>
							</td>
						</tr>

					</xsl:when>

					<!-- Tussenkop (block style name = Item (tussenkopje))
					Shows a subheader to seperate items in groups-->
					<xsl:when test="contains(style, 'tussenkopje')">

						<tr>
							<!-- Basic block -->
							<td class="contentSubheaderMainBlock">

								<!-- The data attributes are used for in contentblocks editor -->
								<table width="100%" cellpadding="0" cellspacing="0" style="width: 100%" class="emItem emEditable emMoveable">
									<xsl:attribute name="data-sort"><xsl:value-of select="sort_on" /></xsl:attribute>
									<xsl:attribute name="data-ID"><xsl:value-of select="merge_ID"/></xsl:attribute>
									<xsl:attribute name="data-last">
										<xsl:choose>
											<xsl:when test="position() = last()">true</xsl:when>
											<xsl:otherwise>false</xsl:otherwise>
										</xsl:choose>
									</xsl:attribute>
									<xsl:attribute name="data-first">
										<xsl:choose>
											<xsl:when test="position() = 1">true</xsl:when>
											<xsl:otherwise>false</xsl:otherwise>
										</xsl:choose>
									</xsl:attribute>
									<tr>
										<td class="contentSubheaderOuterContainer">

											<table width="100%" cellpadding="0" cellspacing="0" style="width: 100%">
												<tr>
													<td class="contentSubheaderInnerContainer">
														<h2><xsl:value-of select="title" /></h2>
													</td>
												</tr>
											</table>

										</td>
									</tr>
								</table>
							</td>
						</tr>

						<!-- Create a line to generate margin between two item blocks -->
						<tr>
							<td class="contentBottomMargin">
								<xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text>
							</td>
						</tr>

					</xsl:when>

					<!-- Item (agenda) / Item (agenda kop) style
					This will override the Agenda block below
					Allows possibility to move Agenda block between normal Items
					You have still to create Agenda items-->
					<xsl:when test="contains(style, 'agenda')">
						<tr>
							<td class="contentMainBlockItem">
								<xsl:call-template name="agenda_container">
									<xsl:with-param name="with_data">1</xsl:with-param>
								</xsl:call-template>
							</td>
						</tr>
					</xsl:when>
				</xsl:choose>

			</xsl:for-each>

			<!-- Loop through each items with style name starting with Agenda
			Except when Item (agenda kop) block is created
			Normally all agenda will be displayed below items
			But if you create a block with style Item (agenda kop) then you can display agenda between items -->
			<xsl:if test="count(matches/match[contains(style, 'Agenda')]) != 0 and count(matches/match[contains(style, 'Item (agenda')]) = 0">
				<xsl:call-template name="agenda_container">
					<xsl:with-param name="with_data">0</xsl:with-param>
				</xsl:call-template>
			</xsl:if>

		</table>

	</xsl:template>

	<!--
	Central template for date text (to prevent double codes).
	When you empty the date fields in the content block details, then the dates will be saved as 1 january 2020.
	Or you filled in the db.icon field, then show the custom text from db.icon field instead of date fields.
	-->
	<xsl:template name="date_subtitle">
		<xsl:param name="row" />

		<xsl:choose>
			<xsl:when test="$row/icon != ''">
				<xsl:value-of select="$row/icon" disable-output-escaping="yes" />
			</xsl:when>
			<xsl:when test="not(contains($row/display_playdate_start, '1 januari 2000'))">

				<xsl:variable name="start_date"><xsl:value-of select="substring-before($row/playdate_start, 'T')" /></xsl:variable>
				<xsl:variable name="start_year"><xsl:value-of select="substring-before($start_date,'-')" /></xsl:variable>
				<xsl:variable name="start_month"><xsl:value-of select="substring($row/playdate_start, 6, 2)" /></xsl:variable>
				<xsl:variable name="start_day"><xsl:value-of select="substring($row/playdate_start, 9, 2)" /></xsl:variable>

				<xsl:variable name="start_a" select="floor((14 - $start_month) div 12)"/>
				<xsl:variable name="start_y" select="$start_year - $start_a"/>
				<xsl:variable name="start_m" select="$start_month + 12 * $start_a - 2"/>

				<xsl:variable name="start_weekday" select="($start_day + $start_y + floor($start_y div 4) - floor($start_y div 100) + floor($start_y div 400) + floor((31 * $start_m) div 12)) mod 7" />

				<xsl:variable name="end_date"><xsl:value-of select="substring-before($row/playdate_end, 'T')" /></xsl:variable>
				<xsl:variable name="end_year"><xsl:value-of select="substring-before($end_date,'-')" /></xsl:variable>
				<xsl:variable name="end_month"><xsl:value-of select="substring($row/playdate_end, 6, 2)" /></xsl:variable>
				<xsl:variable name="end_day"><xsl:value-of select="substring($row/playdate_end, 9, 2)" /></xsl:variable>

				<xsl:variable name="end_a" select="floor((14 - $end_month) div 12)"/>
				<xsl:variable name="end_y" select="$end_year - $end_a"/>
				<xsl:variable name="end_m" select="$end_month + 12 * $end_a - 2"/>

				<xsl:variable name="end_weekday" select="($end_day + $end_y + floor($end_y div 4) - floor($end_y div 100) + floor($end_y div 400) + floor((31 * $end_m) div 12)) mod 7" />

				<xsl:choose>
					<xsl:when test="$start_weekday = '0'"><xsl:value-of select="$date_day_0" /></xsl:when>
					<xsl:when test="$start_weekday = '1'"><xsl:value-of select="$date_day_1" /></xsl:when>
					<xsl:when test="$start_weekday = '2'"><xsl:value-of select="$date_day_2" /></xsl:when>
					<xsl:when test="$start_weekday = '3'"><xsl:value-of select="$date_day_3" /></xsl:when>
					<xsl:when test="$start_weekday = '4'"><xsl:value-of select="$date_day_4" /></xsl:when>
					<xsl:when test="$start_weekday = '5'"><xsl:value-of select="$date_day_5" /></xsl:when>
					<xsl:when test="$start_weekday = '6'"><xsl:value-of select="$date_day_6" /></xsl:when>
				</xsl:choose>

				<xsl:choose>
					<xsl:when test="substring($start_day, 1, 1) = '0'"><xsl:value-of select="substring($start_day, 2, 1)" /></xsl:when>
					<xsl:otherwise><xsl:value-of select="$start_day" /></xsl:otherwise>
				</xsl:choose>

				<xsl:text disable-output-escaping="yes"><![CDATA[ ]]></xsl:text>

				<xsl:choose>
					<xsl:when test="$start_month = '01'"><xsl:value-of select="$date_month_1" /></xsl:when>
					<xsl:when test="$start_month = '02'"><xsl:value-of select="$date_month_2" /></xsl:when>
					<xsl:when test="$start_month = '03'"><xsl:value-of select="$date_month_3" /></xsl:when>
					<xsl:when test="$start_month = '04'"><xsl:value-of select="$date_month_4" /></xsl:when>
					<xsl:when test="$start_month = '05'"><xsl:value-of select="$date_month_5" /></xsl:when>
					<xsl:when test="$start_month = '06'"><xsl:value-of select="$date_month_6" /></xsl:when>
					<xsl:when test="$start_month = '07'"><xsl:value-of select="$date_month_7" /></xsl:when>
					<xsl:when test="$start_month = '08'"><xsl:value-of select="$date_month_8" /></xsl:when>
					<xsl:when test="$start_month = '09'"><xsl:value-of select="$date_month_9" /></xsl:when>
					<xsl:when test="$start_month = '10'"><xsl:value-of select="$date_month_10" /></xsl:when>
					<xsl:when test="$start_month = '11'"><xsl:value-of select="$date_month_11" /></xsl:when>
					<xsl:when test="$start_month = '12'"><xsl:value-of select="$date_month_12" /></xsl:when>
				</xsl:choose>

				<xsl:value-of select="$start_year" />

				<xsl:if test="$row/display_playdate_start != $row/display_playdate_end">

					<xsl:value-of select="$date_period_prefix" />

					<xsl:choose>
						<xsl:when test="$end_weekday = '0'"><xsl:value-of select="$date_day_0" /></xsl:when>
						<xsl:when test="$end_weekday = '1'"><xsl:value-of select="$date_day_1" /></xsl:when>
						<xsl:when test="$end_weekday = '2'"><xsl:value-of select="$date_day_2" /></xsl:when>
						<xsl:when test="$end_weekday = '3'"><xsl:value-of select="$date_day_3" /></xsl:when>
						<xsl:when test="$end_weekday = '4'"><xsl:value-of select="$date_day_4" /></xsl:when>
						<xsl:when test="$end_weekday = '5'"><xsl:value-of select="$date_day_5" /></xsl:when>
						<xsl:when test="$end_weekday = '6'"><xsl:value-of select="$date_day_6" /></xsl:when>
					</xsl:choose>

					<xsl:choose>
						<xsl:when test="substring($end_day, 1, 1) = '0'"><xsl:value-of select="substring($end_day, 2, 1)" /></xsl:when>
						<xsl:otherwise><xsl:value-of select="$end_day" /></xsl:otherwise>
					</xsl:choose>

					<xsl:text disable-output-escaping="yes"><![CDATA[ ]]></xsl:text>

					<xsl:choose>
						<xsl:when test="$end_month = '01'"><xsl:value-of select="$date_month_1" /></xsl:when>
						<xsl:when test="$end_month = '02'"><xsl:value-of select="$date_month_2" /></xsl:when>
						<xsl:when test="$end_month = '03'"><xsl:value-of select="$date_month_3" /></xsl:when>
						<xsl:when test="$end_month = '04'"><xsl:value-of select="$date_month_4" /></xsl:when>
						<xsl:when test="$end_month = '05'"><xsl:value-of select="$date_month_5" /></xsl:when>
						<xsl:when test="$end_month = '06'"><xsl:value-of select="$date_month_6" /></xsl:when>
						<xsl:when test="$end_month = '07'"><xsl:value-of select="$date_month_7" /></xsl:when>
						<xsl:when test="$end_month = '08'"><xsl:value-of select="$date_month_8" /></xsl:when>
						<xsl:when test="$end_month = '09'"><xsl:value-of select="$date_month_9" /></xsl:when>
						<xsl:when test="$end_month = '10'"><xsl:value-of select="$date_month_10" /></xsl:when>
						<xsl:when test="$end_month = '11'"><xsl:value-of select="$date_month_11" /></xsl:when>
						<xsl:when test="$end_month = '12'"><xsl:value-of select="$date_month_12" /></xsl:when>
					</xsl:choose>

					<xsl:value-of select="$end_year" />

				</xsl:if>

				<xsl:if test="substring($row/playdate_start, 12, 5) != '00:00'">
					<xsl:value-of select="$date_time_prefix" />
					<xsl:value-of select="substring($row/playdate_start, 12, 5)" />

					<xsl:if test="substring($row/playdate_end, 12, 5) != substring($row/playdate_start, 12, 5)">
						<xsl:value-of select="$date_time_period_prefix" />
						<xsl:value-of select="substring($row/playdate_end, 12, 5)" />
					</xsl:if>
				</xsl:if>

			</xsl:when>
		</xsl:choose>

	</xsl:template>

	<!--
	Central template for the button container (to prevent double codes).
	This container is used to display buttons at line below content.
	-->
	<xsl:template name="button_container">
		<xsl:param name="row" />
		<xsl:param name="ignore_width">0</xsl:param>

		<xsl:variable name="button_width">
			<xsl:choose>
				<xsl:when test="contains($row/style, '1/2')"><xsl:value-of select="$width_12" /></xsl:when>
				<xsl:when test="contains($row/style, '1/3')"><xsl:value-of select="$width_13" /></xsl:when>
				<xsl:when test="contains($row/style, '2/3')"><xsl:value-of select="$width_23" /></xsl:when>
				<xsl:otherwise>700</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>

		<td>
			<xsl:attribute name="style">
				<xsl:choose>
					<xsl:when test="$ignore_width = 1 and $row/extra1 != ''">width: 100%; background-color: <xsl:value-of select="$row/extra1" />;</xsl:when>
					<xsl:when test="$ignore_width = 1">width: 100%;</xsl:when>
					<xsl:when test="$row/extra1 != ''">width: <xsl:value-of select="$button_width" />px; background-color: <xsl:value-of select="$row/extra1" /></xsl:when>
					<xsl:otherwise>width: <xsl:value-of select="$button_width" />px;</xsl:otherwise>
				</xsl:choose>
			</xsl:attribute>

			<xsl:attribute name="class">
				<xsl:choose>
					<xsl:when test="contains($row/style, 'banner')">contentButtonContainerBanner</xsl:when>
					<xsl:when test="contains($row/style, 'uitgelicht') or $row/extra1 !=''">contentButtonContainerFeatured</xsl:when>
					<xsl:otherwise>contentButtonContainer</xsl:otherwise>
				</xsl:choose>
			</xsl:attribute>

			<table cellspacing="0" cellpadding="0">
				<xsl:attribute name="style">
					<xsl:choose>
						<xsl:when test="$ignore_width = 1">width: 100%</xsl:when>
						<xsl:otherwise>width: <xsl:value-of select="$button_width" />px;</xsl:otherwise>
					</xsl:choose>
				</xsl:attribute>
				<xsl:attribute name="width">
					<xsl:choose>
						<xsl:when test="$ignore_width = 1">100%</xsl:when>
						<xsl:otherwise><xsl:value-of select="$button_width" /></xsl:otherwise>
					</xsl:choose>
				</xsl:attribute>
				<tr>

					<xsl:choose>
						<xsl:when test="($row/url != '' and not(contains($row/image_alt, 'NOBUTTON'))) or ($row/url2 != '' and not(contains($row/icon2, 'NOBUTTON')))">
							<td class="contentButtonInnerContainer">
								<table cellpadding="0" cellspacing="0">
									<!-- Button 1 -->
									<xsl:if test="$row/url != '' and not(contains($row/image_alt, 'NOBUTTON'))">
										<xsl:if test="contains($row/style, '1/3')">
											<xsl:text disable-output-escaping="yes"><![CDATA[<tr>]]></xsl:text>
										</xsl:if>
										<td class="contentButtonBlock">
											<xsl:attribute name="style">
												<xsl:choose>
													<xsl:when test="$row/url2 != '' and not(contains($row/style, '1/3')) and not(contains($row/icon2, 'NOBUTTON'))">padding-right: 15px;</xsl:when>
													<xsl:otherwise>padding-right: 0px;</xsl:otherwise>
												</xsl:choose>
											</xsl:attribute>

											<xsl:call-template name="button">
												<xsl:with-param name="url" select="$row/details_url" />
												<xsl:with-param name="button_text" select="$row/image_alt" />
												<xsl:with-param name="button_default_text" select="$button1_text" />
												<xsl:with-param name="class">contentButton</xsl:with-param>
											</xsl:call-template>

										</td>
										<xsl:if test="contains($row/style, '1/3')">
											<xsl:text disable-output-escaping="yes"><![CDATA[</tr>]]></xsl:text>
										</xsl:if>
									</xsl:if>

									<!-- Button 2 -->
									<xsl:if test="$row/url2 != '' and not(contains($row/icon2, 'NOBUTTON'))">
										<xsl:if test="contains($row/style, '1/3')">
											<xsl:text disable-output-escaping="yes"><![CDATA[<tr>]]></xsl:text>
										</xsl:if>
										<td class="contentButtonBlock">
											<xsl:attribute name="style">
												<xsl:choose>
													<xsl:when test="contains($row/style, '1/3')">padding-top: 10px;</xsl:when>
													<xsl:otherwise>padding-top: 0px;</xsl:otherwise>
												</xsl:choose>
											</xsl:attribute>

											<xsl:call-template name="button">
												<xsl:with-param name="url" select="$row/details_url2" />
												<xsl:with-param name="button_text" select="$row/icon2" />
												<xsl:with-param name="button_default_text" select="$button2_text" />
												<xsl:with-param name="class">contentButton2</xsl:with-param>
											</xsl:call-template>

										</td>
										<xsl:if test="contains($row/style, '')">
											<xsl:text disable-output-escaping="yes"><![CDATA[</tr>]]></xsl:text>
										</xsl:if>
									</xsl:if>
								</table>
							</td>
						</xsl:when>
						<xsl:otherwise>
							<td>
								<table cellpadding="0" cellspacing="0">
									<tr>
										<td style="font-size: 1px; line-height: 1px;">
											<xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text>
										</td>
									</tr>
								</table>
							</td>
						</xsl:otherwise>
					</xsl:choose>

				</tr>
			</table>

		</td>

	</xsl:template>

	<!--
	Central template for buttons (to prevent double codes)

	With hide param (1 or 0) you can determine if the button have to be hidden by default.
	This button will be visible when viewing e-mail at mobile devices.
	-->
	<xsl:template name="button">
		<xsl:param name="button_text" />
		<xsl:param name="button_default_text" />
		<xsl:param name="url" />
		<xsl:param name="class" />
		<xsl:param name="align">left</xsl:param>
		<xsl:param name="hide">0</xsl:param>

		<a target="_blank">
			<xsl:attribute name="href"><xsl:value-of select="$url" /></xsl:attribute>

			<table cellpadding="0" cellspacing="0" class="contentButtonTable">
				<xsl:attribute name="align"><xsl:value-of select="$align" /></xsl:attribute>
				<xsl:if test="$hide = 1">
					<xsl:attribute name="style">display:none;width:0px;max-height:0px;overflow:hidden;mso-hide:all;height:0;font-size:0;max-height:0;line-height:0;margin:0 auto;</xsl:attribute>
				</xsl:if>
				<tr>
					<td>
						<xsl:attribute name="class"><xsl:value-of select="$class" /></xsl:attribute>
						<a target="_blank">
							<xsl:attribute name="href"><xsl:value-of select="$url" /></xsl:attribute>
							<xsl:choose>
								<xsl:when test="$button_text != ''"><xsl:value-of select="$button_text" /></xsl:when>
								<xsl:otherwise><xsl:value-of select="$button_default_text" /></xsl:otherwise>
							</xsl:choose>
						</a>
					</td>
				</tr>
			</table>
		</a>

	</xsl:template>

	<!--
	Central template for agenda container with header (to prevent double codes)
	When with_data is 1, then this template is called from items block with Item (agenda) style
	Allows possibility to move agenda block between items instead of display below
	-->
	<xsl:template name="agenda_container">
		<xsl:param name="with_data">0</xsl:param>

		<tr>
			<td class="agendaMainBlock">
				<table width="100%" cellpadding="0" cellspacing="0">
					<tr>
						<td class="agendaHeaderOuterContainer">
							<xsl:choose>
								<xsl:when test="$with_data = 1">

									<table width="100%" cellpadding="0" cellspacing="0" style="width: 100%" class="emItem emEditable emMoveable">
										<xsl:attribute name="data-sort"><xsl:value-of select="sort_on" /></xsl:attribute>
										<xsl:attribute name="data-ID"><xsl:value-of select="merge_ID"/></xsl:attribute>
										<xsl:attribute name="data-last">
											<xsl:choose>
												<xsl:when test="position() = last()">true</xsl:when>
												<xsl:otherwise>false</xsl:otherwise>
											</xsl:choose>
										</xsl:attribute>
										<xsl:attribute name="data-first">
											<xsl:choose>
												<xsl:when test="position() = 1">true</xsl:when>
												<xsl:otherwise>false</xsl:otherwise>
											</xsl:choose>
										</xsl:attribute>
										<tr>
											<td class="agendaHeaderInnerContainer">
												<xsl:value-of select="title" disable-output-escaping="yes" />
											</td>
										</tr>
									</table>

								</xsl:when>
								<xsl:otherwise>

									<table width="100%" cellpadding="0" cellspacing="0" style="width: 100%">
										<tr>
											<td class="agendaHeaderInnerContainer">
												<xsl:value-of select="$agenda_header_text" />
											</td>
										</tr>
									</table>

								</xsl:otherwise>
							</xsl:choose>
						</td>
					</tr>
					<tr>
						<td class="agendaItemsContainer">
							<xsl:for-each select="/matches/match[contains(style, 'Agenda')]">
								<xsl:call-template name="agenda" />
							</xsl:for-each>
						</td>
					</tr>
				</table>
			</td>
		</tr>

		<!-- Create a line to generate margin between two item blocks -->
		<tr>
			<td class="contentBottomMargin">
				<xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text>
			</td>
		</tr>

	</xsl:template>

	<!--
	Central template for agenda (to prevent double codes)
	This is for one agenda item
	-->
	<xsl:template name="agenda">

		<table width="100%" cellpadding="0" cellspacing="0" style="width: 100%" class="emItem emEditable emMoveable">
			<xsl:attribute name="data-sort"><xsl:value-of select="sort_on" /></xsl:attribute>
			<xsl:attribute name="data-ID"><xsl:value-of select="merge_ID" /></xsl:attribute>
			<xsl:attribute name="data-last">
				<xsl:choose>
					<xsl:when test="position() = last()">true</xsl:when>
					<xsl:otherwise>false</xsl:otherwise>
				</xsl:choose>
			</xsl:attribute>
			<xsl:attribute name="data-first">
				<xsl:choose>
					<xsl:when test="position() = 1">true</xsl:when>
					<xsl:otherwise>false</xsl:otherwise>
				</xsl:choose>
			</xsl:attribute>
			<tr>
				<td class="agendaItemContainer">
					<table cellpadding="0" cellspacing="0" width="100%" style="width: 100%">
						<tr>
							<!-- This will be displayed when using datumblok word in block style name
							The date will be saved as 1 january 2000 when the date fields in the content block details are empty -->
							<xsl:if test="contains(style, 'datumblok') and not(contains(display_playdate_start, '1 januari 2000'))">
								<td class="agendaDateBlockContainer">

									<xsl:variable name="start_month"><xsl:value-of select="substring(playdate_start, 6, 2)" /></xsl:variable>
									<xsl:variable name="start_day"><xsl:value-of select="substring(playdate_start, 9, 2)" /></xsl:variable>

									<table cellpadding="0" cellspacing="0">
										<tr>
											<td class="agendaDateBlockDay">
												<xsl:choose>
													<xsl:when test="substring($start_day, 1, 1) = '0'"><xsl:value-of select="substring($start_day, 2, 1)" /></xsl:when>
													<xsl:otherwise><xsl:value-of select="$start_day" /></xsl:otherwise>
												</xsl:choose>
											</td>
										</tr>
										<tr>
											<td class="agendaDateBlockMonth">
												<xsl:choose>
													<xsl:when test="$start_month = '01'"><xsl:value-of select="$date_month_1" /></xsl:when>
													<xsl:when test="$start_month = '02'"><xsl:value-of select="$date_month_2" /></xsl:when>
													<xsl:when test="$start_month = '03'"><xsl:value-of select="$date_month_3" /></xsl:when>
													<xsl:when test="$start_month = '04'"><xsl:value-of select="$date_month_4" /></xsl:when>
													<xsl:when test="$start_month = '05'"><xsl:value-of select="$date_month_5" /></xsl:when>
													<xsl:when test="$start_month = '06'"><xsl:value-of select="$date_month_6" /></xsl:when>
													<xsl:when test="$start_month = '07'"><xsl:value-of select="$date_month_7" /></xsl:when>
													<xsl:when test="$start_month = '08'"><xsl:value-of select="$date_month_8" /></xsl:when>
													<xsl:when test="$start_month = '09'"><xsl:value-of select="$date_month_9" /></xsl:when>
													<xsl:when test="$start_month = '10'"><xsl:value-of select="$date_month_10" /></xsl:when>
													<xsl:when test="$start_month = '11'"><xsl:value-of select="$date_month_11" /></xsl:when>
													<xsl:when test="$start_month = '12'"><xsl:value-of select="$date_month_12" /></xsl:when>
												</xsl:choose>
											</td>
										</tr>
									</table>
								</td>
							</xsl:if>

							<!-- This will be displayed when using normal agenda block style name and image is set -->
							<xsl:if test="not(contains(style, 'datumblok')) and image != ''">
								<td class="agendaImageOuterContainer">
									<table cellpadding="0" cellspacing="0" width="100%" style="width: 100%">
										<tr>
											<td class="agendaImageInnerContainer">
												<xsl:choose>
													<xsl:when test="url != ''">
														<a target="_blank">
															<xsl:attribute name="href"><xsl:value-of select="details_url" /></xsl:attribute>
															<img border="0">
																<xsl:attribute name="width"><xsl:value-of select="$image_width_agenda" /></xsl:attribute>
																<xsl:attribute name="style">display: block; width: <xsl:value-of select="$image_width_agenda" />px;</xsl:attribute>
																<xsl:attribute name="alt"><xsl:value-of select="image_alt1" /></xsl:attribute>
																<xsl:attribute name="title"><xsl:value-of select="image_title" /></xsl:attribute>
																<xsl:attribute name="src"><xsl:value-of select="image" /></xsl:attribute>
															</img>
														</a>
													</xsl:when>
													<xsl:otherwise>
														<img>
															<xsl:attribute name="width"><xsl:value-of select="$image_width_agenda" /></xsl:attribute>
															<xsl:attribute name="style">display: block; width: <xsl:value-of select="$image_width_agenda" />px;</xsl:attribute>
															<xsl:attribute name="alt"><xsl:value-of select="image_alt1" /></xsl:attribute>
															<xsl:attribute name="title"><xsl:value-of select="image_title" /></xsl:attribute>
															<xsl:attribute name="src"><xsl:value-of select="image" /></xsl:attribute>
														</img>
													</xsl:otherwise>
												</xsl:choose>
											</td>
										</tr>
									</table>
								</td>
							</xsl:if>

							<!-- Content container -->
							<td class="agendaContentContainer">
								<table cellpadding="0" cellspacing="0" width="100%" style="width: 100%">

									<!-- Caption with same || option as in items -->
									<tr>
										<td class="agendaCaption">
											<xsl:variable name="title">
												<xsl:choose>
													<xsl:when test="contains(title, ' || ')">
														<xsl:value-of select="normalize-space(substring-before(title, ' || '))" disable-output-escaping="yes" />
														<xsl:text disable-output-escaping="yes"><![CDATA[<br />]]></xsl:text>
														<xsl:choose>
															<xsl:when test="contains(substring-after(title, ' || '), ' || ')">
																<xsl:value-of select="normalize-space(substring-before(substring-after(title, ' || '), ' ||'))" disable-output-escaping="yes" />
																<xsl:text disable-output-escaping="yes"><![CDATA[<br />]]></xsl:text>
																<xsl:value-of select="normalize-space(substring-after(substring-after(title, ' || '), ' || '))" disable-output-escaping="yes" />
															</xsl:when>
															<xsl:otherwise>
																<xsl:value-of select="normalize-space(substring-after(title, ' || '))" disable-output-escaping="yes" />
															</xsl:otherwise>
														</xsl:choose>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="title" disable-output-escaping="yes" />
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>

											<h2><xsl:value-of select="$title" disable-output-escaping="yes" /></h2>
										</td>
									</tr>

									<!-- Subtitle with same || option as in items -->
									<xsl:if test="location != ''">
										<tr>
											<td class="agendaSubtitle">

												<xsl:variable name="subtitle">
													<xsl:choose>
														<xsl:when test="contains(location, ' || ')">
															<xsl:value-of select="normalize-space(substring-before(location, ' || '))" disable-output-escaping="yes" />
															<xsl:text disable-output-escaping="yes"><![CDATA[<br />]]></xsl:text>
															<xsl:choose>
																<xsl:when test="contains(substring-after(location, ' || '), ' || ')">
																	<xsl:value-of select="normalize-space(substring-before(substring-after(location, ' || '), ' ||'))" disable-output-escaping="yes" />
																	<xsl:text disable-output-escaping="yes"><![CDATA[<br />]]></xsl:text>
																	<xsl:value-of select="normalize-space(substring-after(substring-after(location, ' || '), ' || '))" disable-output-escaping="yes" />
																</xsl:when>
																<xsl:otherwise>
																	<xsl:value-of select="normalize-space(substring-after(location, ' || '))" disable-output-escaping="yes" />
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:otherwise>
															<xsl:value-of select="location" disable-output-escaping="yes" />
														</xsl:otherwise>
													</xsl:choose>
												</xsl:variable>

												<h4><xsl:value-of select="$subtitle" disable-output-escaping="yes" /></h4>
											</td>
										</tr>
									</xsl:if>

									<!-- Show same date text as items blocks when no datumblock trigger word is used in block style name -->
									<xsl:if test="not(contains(style, 'datumblok'))">
										<tr>
											<td class="agendaDate">
												<xsl:call-template name="date_subtitle">
													<xsl:with-param name="row" select="." />
												</xsl:call-template>
											</td>
										</tr>
									</xsl:if>

									<!-- Show times when filled and using datumblok trigger word in block style name -->
									<xsl:if test="contains(style, 'datumblok') and not(contains(display_playdate_start, '1 januari 2000')) and substring(playdate_start, 12, 5) != '00:00'">
										<tr>
											<td class="agendaTime">
												<xsl:value-of select="substring(playdate_start, 12, 5)" />

												<xsl:if test="substring(playdate_end, 12, 5) != substring(playdate_start, 12, 5)">
													<xsl:value-of select="$date_time_period_prefix" />
													<xsl:value-of select="substring(playdate_end, 12, 5)" />
												</xsl:if>
											</td>
										</tr>
									</xsl:if>
								</table>
							</td>

							<!-- Button -->
							<xsl:if test="url != '' and not(contains(image_alt, 'NOBUTTON'))">
								<td class="agendaButtonContainer">
									<xsl:call-template name="button">
										<xsl:with-param name="align">right</xsl:with-param>
										<xsl:with-param name="button_default_text" select="$button1_text" />
										<xsl:with-param name="button_text" select="image_alt" />
										<xsl:with-param name="class">contentButton</xsl:with-param>
										<xsl:with-param name="url" select="details_url" />
									</xsl:call-template>
								</td>
							</xsl:if>
						</tr>
					</table>
				</td>
			</tr>

		</table>

	</xsl:template>

</xsl:stylesheet>